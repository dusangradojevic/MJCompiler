package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSyntax error.", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing can not be continued.", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" on line ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" on line ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

/*******************************************
************    Terminals    ***************
********************************************/

// Keywords
terminal PROGRAM, BREAK, CLASS, ENUM, ELSE, CONST, IF, DO, WHILE, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE, THIS, SUPER, GOTO, RECORD; 		

// Identifier
terminal String IDENT; 			

// Constants
terminal Integer NUM_CONST;
terminal Character CHAR_CONST; 	
terminal Boolean BOOL_CONST; 	

// Operators
terminal ADDITION, SUBTRACTION; 	
terminal MULTIPLICATION, DIVISION, MODULO; 		
terminal EQUALS_TO, NOT_EQUALS_TO, GREATER_THAN, GRT_OR_EQUAL, LESS_THAN, LESS_OR_EQUAL; 	
terminal LOGICAL_AND, LOGICAL_OR; 	
terminal ASSIGNMENT, INCREMENT, DECREMENT, SEMICOLON, COLON, COMMA, DOT; 			
terminal L_PARENTHESES, R_PARENTHESES, L_BRACKETS, R_BRACKETS, L_BRACES, R_BRACES;



/*******************************************
************    Nonterminals    ************
********************************************/

nonterminal Program, ProgramName, ProgramDeclList;
nonterminal ConstDecl, ConstDefList, ConstDef, ConstValue;
nonterminal VarDeclList, VarIdent, VarIdentList, ArrayOpt;
nonterminal ClassDecl, ExtendsOpt, ConstructorDecl, ConstructorMethodDecl, ConstructorMethodDeclList;
nonterminal MethodDeclList;
nonterminal ReturnType;
nonterminal FormPars, FormParsIdent, FormParsOptArgsList;
nonterminal OptArgs, OptArgsIdent;
nonterminal Type;
nonterminal Statement, SingleStatement, Statements, StatementList, DesignatorStatement, ElseStart;
nonterminal Label;
nonterminal NumConstOpt;
nonterminal Assignop, Relop, Addop, Mulop;
nonterminal DoWhileBegin, DoWhileEnd, IfStart, ThenStart;

nonterminal rs.etf.pp1.symboltable.concepts.Obj VarDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDecl, MethodName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator, DesignatorFirst, DesignatorList, DesignatorListItem;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr, ExprOpt, MinusOpt;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor, Term, AddopTermList, AddopTermListItem, MulopFactorList, MulopFactorListItem;
nonterminal rs.etf.pp1.symboltable.concepts.Struct ArrayExprOpt;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Condition, CondTerm, CondTermList, CondTermListItem, CondFact, CondFactList, CondFactListItem, RelopExprOpt;
nonterminal rs.etf.pp1.symboltable.concepts.Struct ActParsListItem;

nonterminal rs.ac.bg.etf.pp1.util.StructLinkedList ActParsOpt, ActPars, ActParsList;
nonterminal rs.ac.bg.etf.pp1.util.StructLinkedList FuncCallOpt;


/*******************************************
************    Grammar    *****************
********************************************/

precedence left ELSE;

Program ::= (Program) PROGRAM ProgramName ProgramDeclList L_BRACES MethodDeclList R_BRACES;

ProgramName ::= (ProgramName) IDENT:programName;

ProgramDeclList ::= (ProgramDeclListConstDecl) ProgramDeclList ConstDecl
				  | (ProgramDeclListVarDecl)   ProgramDeclList VarDecl
		  		  | (ProgramDeclListClassDecl) ProgramDeclList ClassDecl
          		  | (ProgramDeclListEpsilon)   /* epsilon */
				  ;
				  

// Const declarations

ConstDecl ::= (ConstDecl) CONST Type ConstDef ConstDefList SEMICOLON;

ConstDef ::= (ConstDef) IDENT:constName ASSIGNMENT ConstValue;

ConstDefList ::= (ConstDefListNext)    ConstDefList COMMA ConstDef
			   | (ConstDefListEpsilon) /* epsilon */
			   ;
				
ConstValue ::= (NumConst)  NUM_CONST:numConst
			 | (CharConst) CHAR_CONST:charConst
			 | (BoolConst) BOOL_CONST:boolConst
			 | error 	   {: System.err.println("Recovery error while assigning"); :}
			 ;


// Var declarations

VarDecl ::= (VarDecl) Type VarIdent VarIdentList SEMICOLON;

VarIdent ::= (VarIdent) IDENT:varName ArrayOpt:isArray;

VarIdentList ::= (VarIdentListDeclared) VarIdentList COMMA VarIdent
               | (VarIdentListEpsilon) 	/* epsilon */
               ;
               
VarDeclList ::= (VarDeclListDeclared) VarDeclList VarDecl
              | (VarDeclListEpsilon)  /* epsilon */
              ;   
              
ArrayOpt ::= (ArrayOptNext)    L_BRACKETS R_BRACKETS
		   | (ArrayOptEpsilon) /* epsilon */
		   ;
                             

// Class declarations

ClassDecl ::= (ClassDecl) CLASS IDENT:className ExtendsOpt L_BRACES VarDeclList ConstructorMethodDecl R_BRACES;

ExtendsOpt ::= (ExtendsOptNext)    EXTENDS Type
			 | (ExtendsOptEpsilon) /* epsilon */
			 ;
			 
ConstructorMethodDecl ::= (ConstructorMethodDeclNonEmpty) L_BRACES ConstructorMethodDeclList R_BRACES
						| (ConstructorMethodDeclEmpty) 	  L_BRACES R_BRACES
        				| (ConstructorMethodDeclEpsilon)  /* epsilon */
        				;

ConstructorMethodDeclList ::= (ConstructorMethodDeclListMultiple) 	 ConstructorMethodDeclList MethodDecl
							| (ConstructorMethodDeclListConstructor) ConstructorDecl
							| (ConstructorMethodDeclListMethod) 	 MethodDecl
							;
        				
ConstructorDecl ::= (ConstructorDecl) IDENT:constructorName L_PARENTHESES R_PARENTHESES VarDeclList L_BRACES StatementList R_BRACES;

MethodDeclList ::= (MethodDeclListNext)    MethodDeclList MethodDecl
				 | (MethodDeclListEpsilon) /* epsilon */
				 ;
		 
MethodDecl ::= (MethodDecl) ReturnType MethodName L_PARENTHESES FormParsOptArgsList R_PARENTHESES VarDeclList L_BRACES StatementList R_BRACES;

MethodName ::= (MethodName) IDENT:methodName;

ReturnType ::= (ReturnTypeNonVoid) Type 
			 | (ReturnTypeVoid)    VOID
			 ;	
					  
FormParsOptArgsList ::= (FormParsOptArgsListAll) 	  FormPars COMMA OptArgs
               		  | (FormParsOptArgsListFormPars) FormPars 
               		  | (FormParsOptArgsListOptArgs)  OptArgs 
               		  | (FormParsOptArgsListEpsilon)  /* epsilon */ 
               		  ;
				
FormPars ::= (FormParsNext)  FormPars COMMA Type FormParsIdent
           | (FormParsFirst) Type FormParsIdent
           ;

FormParsIdent ::= (FormParsIdent) IDENT:formParName ArrayOpt:isArray;          	    		   	   		 
		   	   
OptArgs ::= (OptArgsNext)  OptArgs COMMA Type OptArgsIdent
          | (OptArgsFirst) Type OptArgsIdent
          ;

OptArgsIdent ::= (OptArgsIdent) IDENT:optArgsName ASSIGNMENT ConstValue;

Type ::= (Type) IDENT:typeName;


// Statement declarations

Statement ::= (StatementLabel) 			 Label COLON SingleStatement
            | (StatementSingleStatement) SingleStatement
            | (StatementStatements) 	 Statements
            ;
            
StatementList ::= (StatementListNext) 	 StatementList Statement
				| (StatementListEpsilon) /* epsilon */
	  		    ;
            
SingleStatement ::= (SingleStatementDesignatorStatement) DesignatorStatement SEMICOLON
            	  | (SingleStatementIfElse) 			 IfStart L_PARENTHESES Condition ThenStart Statement ElseStart Statement
            	  | (SingleStatementIf) 				 IfStart L_PARENTHESES Condition ThenStart Statement
            	  | (SingleStatementDoWhile) 			 DoWhileBegin Statement DoWhileEnd L_PARENTHESES Condition R_PARENTHESES SEMICOLON
            	  | (SingleStatementBreak) 				 BREAK SEMICOLON
            	  | (SingleStatementContinue) 			 CONTINUE SEMICOLON
            	  | (SingleStatementReturn) 			 RETURN ExprOpt SEMICOLON
            	  | (SingleStatementRead) 				 READ L_PARENTHESES Designator R_PARENTHESES SEMICOLON
            	  | (SingleStatementPrint) 				 PRINT L_PARENTHESES Expr NumConstOpt R_PARENTHESES SEMICOLON
            	  | (SingleStatementGoto) 				 GOTO Label SEMICOLON
            	  ;

Statements ::= (Statements) L_BRACES StatementList R_BRACES;
	  		    
ElseStart ::= (ElseStart) ELSE;  		    
	  		   
NumConstOpt ::= (NumConstOptNext) 	 COMMA NUM_CONST:numConst
           	  | (NumConstOptEpsilon) /*epsilon*/
           	  ;
     
DesignatorStatement ::= (DesignatorStatementAssignop) Designator Assignop Expr
					  | (DesignatorStatementActPars)  Designator L_PARENTHESES ActParsOpt R_PARENTHESES
                      | (DesignatorStatementInc) 	  Designator INCREMENT
                      | (DesignatorStatementDec) 	  Designator DECREMENT
                      ; 	
                      
IfStart ::= (IfStart) IF;

ThenStart ::= (ThenStart) R_PARENTHESES;
                      
DoWhileBegin ::= (DoWhileBegin) DO;

DoWhileEnd ::= (DoWhileEnd) WHILE;
                      
ActPars ::= (ActPars) Expr ActParsList;                 

ActParsList ::= (ActParsListNext) 	 ActParsList ActParsListItem
              | (ActParsListEpsilon) /* epsilon */
              ;   
              
ActParsListItem ::= (ActParsListItem) COMMA Expr;
              
ActParsOpt ::= (ActParsOptNext)    ActPars 
			 | (ActParsOptEpsilon) /* epsilon */ 
			 ;            
          
Condition ::= (Condition) CondTerm CondTermList;    

CondTermList ::= (CondTermListNext)    CondTermList CondTermListItem
			   | (CondTermListEpsilon) /* epsilon */
			   ;
			   
CondTermListItem ::= (CondTermListItem) LOGICAL_OR CondTerm;
                
CondTerm ::= (CondTerm) CondFact CondFactList;

CondFactList ::= (CondFactListNext)    CondFactList CondFactListItem
			   | (CondFactListEpsilon) /* epsilon */
               ;
               
CondFactListItem ::= (CondFactListItem) LOGICAL_AND CondFact;
               
CondFact ::= (CondFact) Expr RelopExprOpt;
		   
RelopExprOpt ::= (RelopExprOptNext)    Relop Expr
			   | (RelopExprOptEpsilon) /* epsilon */
			   ;
                     
Expr ::= (Expr) MinusOpt Term AddopTermList;

ExprOpt ::= (ExprOptNext) 	 Expr
		  | (ExprOptEpsilon) /* epsilon */
		  ;
		  
MinusOpt ::= (MinusOptNext)    SUBTRACTION
		   | (MinusOptEpsilon) /* epsilon */
		   ;
		  
AddopTermList ::= (AddopTermListNext) 	 AddopTermList AddopTermListItem
                | (AddopTermListEpsilon) /*epsilon*/
                ;
                
AddopTermListItem ::= (AddopTermListItem) Addop Term;

Term ::= (Term) Factor MulopFactorList;

MulopFactorList ::= (MulopFactorListNext) 	 MulopFactorList MulopFactorListItem
                  | (MulopFactorListEpsilon) /* epsilon */
                  ;
                  
MulopFactorListItem ::= (MulopFactorListItem) Mulop Factor;

Factor ::= (FactorDesignatorFuncCallOpt) Designator FuncCallOpt
		 | (FactorConst) 			   	 ConstValue
		 | (FactorNew) 	 				 NEW Type ArrayExprOpt
		 | (FactorExpr) 			   	 L_PARENTHESES Expr R_PARENTHESES
		 ;
		 
FuncCallOpt ::= (FuncCallOptNext) 	 L_PARENTHESES ActParsOpt R_PARENTHESES
			  | (FuncCallOptEpsilon) /* epsilon */
			  ;
			  
ArrayExprOpt ::= (ArrayExprOptNext)    L_BRACKETS Expr R_BRACKETS
			   | (ArrayExprOptEpsilon) /* epsilon */
			   ;

Designator ::= (Designator) DesignatorFirst DesignatorList;
			 
DesignatorList ::= (DesignatorListNext)    DesignatorList DesignatorListItem
				 | (DesignatorListEpsilon) /* epsilon */
				 ;
				 
DesignatorListItem ::= (DesignatorListItemIdent) DOT IDENT:designatorName
				 	 | (DesignatorListItemArray) L_BRACKETS Expr R_BRACKETS
				 	 ;

DesignatorFirst ::= (DesignatorFirstIdent) IDENT:designatorName
				  | (DesignatorFirstThis)  THIS 
				  | (DesignatorFirstSuper) SUPER
				  ;
		
Label ::= (Label) IDENT:labelName;

Assignop ::= (Assignop) ASSIGNMENT;

Relop ::= (RelopEqualsTo) 	 EQUALS_TO
		| (RelopNotEqualsTo) NOT_EQUALS_TO
		| (RelopGreaterThan) GREATER_THAN
		| (RelopGrtOrEqual)  GRT_OR_EQUAL
		| (RelopLessThan) 	 LESS_THAN
		| (RelopLessOrEqual) LESS_OR_EQUAL
		;
		
Addop ::= (AddopAdd) ADDITION
		| (AddopSub) SUBTRACTION
		;

Mulop ::= (MulopMul) MULTIPLICATION
		| (MulopDiv) DIVISION
		| (MulopMod) MODULO
		;
